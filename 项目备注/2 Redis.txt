概述
	非关系数据库
		操作不使用sql语句
		数据默认存储在内存	速度快, 效率高，存储的数据量小
		不需要数据库表		以键值对的方式存储的
	关系/非关系型数据库搭配使用
		所有的数据默认存储在关系型数据库中
		客户端访问服务器, 有一些数据, 服务器需要频繁的查询数据
		服务器首先将数据从关系型数据库中读出 -> 第一次
		将数据写入到redis中
		客户端第二次包含以后访问服务器
		服务器从redis中直接读数据
=============================================================================================
Redis
	Redis安装
		make 
		make install
	Redis启动
		服务器
		redis-server	--默认启动 
		redis-server confFileName	--根据配置文件的设置启动
		客户端 
		redis-cli	--默认连接本地, 绑定了6379默认端口的服务器
		redis-cli -p 端口号
		redis-cli -h IP地址 -p 端口	--连接远程主机的指定端口的redis
		通过客户端关闭服务器 
		shutdown
		客户端的测试命令 
		ping [MSG]
	 Redis配置文件
		配置文件是给redis服务器使用
		配置文件位置：从源码安装目录中找 redis.conf
=============================================================================================
redis常用命令
String类型
	key -> string	value -> string 
	设置一个键值对string:string 
	SET key value 
	通过key得到value
	GET key 
	同时设置一个或多个key-value对 
	MSET key value [key value ...]
	同时查看多个key 
	MGET key [key ...] 
	如果 key 已经存在并且是一个字符串，APPEND 命令将 value 追加到 key 原来的值的末尾
	APPEND key value 
	返回 key 所储存的字符串值的长度 
	STRLEN key
	将 key 中储存的数字值减一，前提value必须是数字字符串 -"12345" 
	DECR key
List类型 - 存储多个字符串
	key -> string	value -> list 
	将一个或多个值 value 插入到列表 key 的表头 
	LPUSH key value [value ...] 
	将一个或多个值 value 插入到列表 key 的表尾 (最右边)
	RPUSH key value [value ...] 
	list中删除元素 
	LPOP key 删除最左侧元素 
	RPOP key 删除最右侧元素
	遍历 LRANGE 
	key start stop 
Set类型
	key -> string	value -> set类型 ("string", "string1") 
	添加元素 
	将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略 
	SADD key member [member ...] 
	遍历 
	SMEMBERS key 
	差集 
	SDIFF key [key ...] 
	交集
	SINTER key [key ...] 
	并集
	SUNION key [key ...]
SortedSet 类型
	key -> string	value -> sorted ([socre, member], [socre, member], ...)
	添加元素 
	ZADD key score member [[score member] [score member] ...] 
	遍历
	ZRANGE key start stop [WITHSCORES]	升序集合 
	ZREVRANGE key start stop [WITHSCORES]	降序集合
	指定分数区间内元素的个数 
	ZCOUNT key min max
Hash类型
	key ->string	value -> hash ([key:value], [key:value], [key:value], ...) 
	添加数据 
	HSET key field value 
	取数据 
	HGET key field 
	批量插入键值对 
	HMSET key field value [field value ...] 
	批量取数据 
	HMGET key field [field ...]
	删除键值对 
	HDEL key field [field ...] 
Key 相关的命令
	删除键值对 
	DEL key [key ...]
	查看key值 
	KEYS pattern	查找所有符合给定模式 pattern 的 key 
	KEYS * 		匹配数据库中所有 key 
	KEYS h?llo	匹配 hello ， hallo 和 hxllo 等
	KEYS h*llo 	匹配 hllo 和 heeeeello 等
	KEYS h[ae]llo	匹配 hello 和 hallo ，但不匹配 hillo
	给key设置生存时长 
	EXPIRE key seconds
	取消生存时长 
	PERSIST key 
	key对应的valued类型 
	TYPE key
=============================================================================================
Redis数据持久化
	持久化: 数据从内存到磁盘的过程
	rdb方式
		这是一种默认的持久化方式, 默认打开
		磁盘的持久化文件xxx.rdb
		将内存数据以二进制的方式直接写入磁盘文件
		文件比较小, 恢复时间短, 效率高
		以用户设定的频率 -> 容易丢失数据
		数据完整性相对较低
	aof方式
		默认是关闭的
		磁盘的持久化文件xxx.aof
		直接将生成数据的命令写入磁盘文件
		文件比较大, 恢复时间长, 效率低
		以某种频率 -> 1sec
		数据完整性高
=============================================================================================
hiredis
	hiredis安装
	make && make insatll
	连接数据库
	redisContext *redisConnect(const char *ip, int port); 
	redisContext *redisConnectWithTimeout(const char *ip, int port, const struct timeval tv);
	执行redis命令函数
	void *redisCommand(redisContext *c, const char *format, ...);
	释放资源
	void freeReplyObject(void *reply); 
	void redisFree(redisContext *c);
=============================================================================================
redisCommand函数实际的返回值类型
	typedef struct redisReply { 
		/* 命令执行结果的返回类型 */ 
		int type; 
		/* 存储执行结果返回为整数 */ 
		long long integer; 
		/* str变量的字符串值长度 */ 
		size_t len; 
		/* 存储命令执行结果返回是字符串, 或者错误信息 */ 
		char *str; 
		/* 返回结果是数组, 代表数据的大小 */ 
		size_t elements; 
		/* 存储执行结果返回是数组*/ 
		struct redisReply **element; 
		}redisReply;
type的状态表示
	REDIS_REPLY_STRING == 1 
	返回值是字符串,字符串储存在redis->str当中,字符串长度为redi 
	REDIS_REPLY_ARRAY == 2 
	返回值是数组，数组大小存在redis->elements里面，数组值存储在redis->element[i]里面
	数组里面存储的是指向redisReply的指针，数组里面的返回值可以通过redis->element[i]->str来访问
	数组的结果里全是type==REDIS_REPLY_STRING的redisReply对象指针
	REDIS_REPLY_INTEGER == 3 
	返回整数long long，从integer字段获取值
	REDIS_REPLY_NIL == 4 
	返回值为空表示执行结果为空
	REDIS_REPLY_STATUS == 5 
	返回命令执行的状态，比如set foo bar 返回的状态为OK，存储在str当中 reply->str == "OK"
	REDIS_REPLY_ERROR == 6 
	命令执行错误,错误信息存放在 reply->str当中。
=============================================================================================